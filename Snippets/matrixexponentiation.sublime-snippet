<snippet>
	<content><![CDATA[
vector<vector<int>> ide(int sz) {
    vector<vector<int>> res(sz, vector<int>(sz, 0));
    for (int i = 0; i < sz; i++)
        res[i][i] = 1;
    return res;
}

vector<vector<int>> mult(const vector<vector<int>> &a, const vector<vector<int>> &b) {
    int r = a.size();
    int c = b.front().size();
    vector<vector<int>> res(r, vector<int>(c, 0));
    int mid = a.front().size();

    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            for (int k = 0; k < mid; k++) {
                res[i][j] += MOD(1ll * a[i][k] * b[k][j]);
                res[i][j] = MOD(res[i][j]);
            }
        }
    }

    return res;
}

vector<vector<int>> po(const vector<vector<int>> &mat, int y) {
    vector<vector<int>> res = ide(mat.size());
    vector<vector<int>> x = mat;

    while (y) {
        if (y & 1) {
            res = mult(res, x);
        }
        y >>= 1;
        x = mult(x, x);
    }

    return res;
}

// n is number of terms, gp starts with identity matrix
vector<vector<int>> gpsum(const vector<vector<int>> &mat, int n) {
    int r = mat.size(), c = mat.front().size();
    assert(r == c);

    if (n == 0)
        return vector<vector<int>>(r, vector<int>(r, 0));
    if (n == 1)
        return ide(r);

    if (n & 1) {
        vector<vector<int>> mat2 = gpsum(mat, n - 1);
        mat2 = mult(mat, mat2);
        for (int i = 0; i < r; i++)
            mat2[i][i] += 1;
        return mat2;
    }

    vector<vector<int>> a = gpsum(mat, n / 2);
    vector<vector<int>> a2 = po(mat, n / 2);
    vector<vector<int>> b = mult(a2, a);
    for (int i = 0; i < r; i++)
        for (int j = 0; j < c; j++)
            a[i][j] += b[i][j], a[i][j] = MOD(a[i][j]);
    return a;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrix</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
