<snippet>
	<content><![CDATA[
static int C; // initialized below

// Arithmetic mod two primes and 2^32 simultaneously.
// "typedef uint64_t H;" instead if Thue-Morse does not apply.
template <int M, class B>
struct A {
    int x;
    B b;
    A(int x = 0) : x(x), b(x) {}
    A(int x, B b) : x(x), b(b) {}
    A operator+(A o) {
        int y = x + o.x;
        return {y - (y >= M) * M, b + o.b};
    }
    A operator-(A o) {
        int y = x - o.x;
        return {y + (y < 0) * M, b - o.b};
    }
    A operator*(A o) { return {(int)(1LL * x * o.x % M), b * o.b}; }

    explicit operator ull() { return x ^ (ull)b << 21; }
};
typedef A<1000000007, A<1000000009, unsigned>> H;

struct HashInterval {
    vector<H> ha, pw;
    HashInterval(string &str) : ha(sz(str) + 1), pw(ha) {
        pw[0] = 1;
        for (int i = 0; i < sz(str); ++i)
            ha[i + 1] = ha[i] * C + str[i], pw[i + 1] = pw[i] * C;
    }
    H hashInterval(int a, int b) { // hash [a, b)
        return ha[b] - ha[a] * pw[b - a];
    }
};

H hashString(string &s) {
    H h{};
    for (char c : s)
        h = h * C + c;
    return h;
}
#include <sys/time.h>

// add this in main
timeval tp;
gettimeofday(&tp, 0);
C = (int)tp.tv_usec;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>string_hashing</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
