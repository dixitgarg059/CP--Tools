<snippet>
	<content><![CDATA[
    #include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>   
using namespace std;
using namespace __gnu_pbds;
typedef long long ll; 
#define int long long
typedef unsigned long long lu;
typedef vector<ll> v;
typedef vector<vector<ll> > vv;
typedef vector<string>  vs;
typedef vector<pair<ll,ll>> vpr;
typedef vector<bool>vb;
typedef vector<double>vd;
typedef long double ld;
#define f(i,n) for(ll i = 0; i < n; i++)
#define ff(i,n) for(ll i=1;i<=n;i++)
#define pb push_back
#define mp make_pair
#define endl "\n"
#define fi first
#define se second
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(),x.rend()
#define amax(x,y) if(y>x) x=y;
#define amin(x,y) if(y<x)x=y;
#define bg(x) x.begin()
#define sz(x) (ll)x.size()
#define in(x,n) for(ll i=0;i<n;i++)cin>>x[i]
#define out(x,n) for(ll i=0;i<n;i++)cout<<x[i]<<" " 
#define mxt(a) *(max_element(a.begin(),a.end()))
#define mnt(a) *(min_element(a.begin(),a.end())
#define tc ll t;cin>>t;while(t--)
typedef pair<ll,ll> pi;
#define yes cout<<"YES\n";
#define no cout<<"NO\n";
#define yesno(f) if(f) yes else no
const v dx = {1, -1, 0, 0};
const v dy = {0, 0, 1, -1};
const ld PI = 2 * acos(0.0);
ll cel(ll x1,ll y1){if((x1%y1)==0)return x1/y1;else return x1/y1+1;}
ll power(ll a,ll b,ll m)
{
    if(b==0)
        return 1;
    ll d=power(a,b/2,m);
    d=(d*d)%m;
    if(b&1)
        d=(d*a)%m;
    return d;
}
const ll mod=1e9+7;
int MOD(int a)
{
    if(a<0)
        a+=mod;
    if(a>=mod)
        a%=mod;
    return a;
}
// set_name.find_by_order(k) It returns to an iterator to the kth element (counting from zero) in the set in O(logn) time
// set_name.order_of_key(k) It returns to the number of items that are strictly smaller than our item k in O(logn) time.
/*string operations :
str.substr (x,y) : returns a substring str[x],str[x+1],...str[x+y-1]
str.substr (x) : returns a substring str[x],... end of string
str.find(qtr) : returns the first occurenece of qtr in str */
stack<int>st;
void dfs(int u,vb &vst,vv &gr)
{
    for(auto it:gr[u])
    {
        if(!vst[it])
        {
            vst[it]=true;
            dfs(it,vst,gr);
        }
    }
    st.push(u);
}
void dfs2(int u,vv &gr,v &components,vb &vst)
{
    for(auto it:gr[u])
    {
        if(!vst[it])
        {
            vst[it]=true;
            components.pb(it);
            dfs2(it,gr,components,vst);
        }
    }

}

int32_t main()
{
    ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    while(true){
        int n;cin>>n;
        if(n==0)
            break;
        int e;cin>>e;
        vv gr(n),rgr(n);
        for(int i=0;i<e;i++)
        {
            int a,b;cin>>a>>b;
            a--;
            b--;
            gr[a].pb(b);
            rgr[b].pb(a);
        }
        vb vst(n,false);
        for(int i=0;i<n;i++)
        {
            if(!vst[i])
            {
                vst[i]=true;
                dfs(i,vst,gr);
            }
        }
        fill(all(vst),false);
        v ans;
        vb vst2(n,false);
        while(!st.empty())
        {
            int u=st.top();
            st.pop();
            if(vst[u])
                continue;
            vst[u]=true;
            v components;
            components.pb(u);
            dfs2(u,rgr,components,vst);
            for(auto it:components)
            {
                vst2[it]=true;
            }
            bool flg=true;
            for(auto it:components)
            {
                for(auto it1:gr[it])
                {
                    if(!vst2[it1])
                    {
                        flg=false;
                        break;
                    }
                }
                if(!flg)
                    break;
            }
            if(flg)
            {
                for(auto it:components)
                    ans.pb(it);
            }
            for(auto it:components)
                vst2[it]=false;
            // for(auto it:components)
                // cout<<it+1<<" ";
            // cout<<endl;
        }
        sort(all(ans));
        for(auto it:ans)
            cout<<it+1<<" ";
        cout<<endl;
    }
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>scc</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
