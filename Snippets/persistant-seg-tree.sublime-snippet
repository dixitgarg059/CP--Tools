<snippet>
	<content><![CDATA[
int Nodes=0;
const int N=1e7;
int seg[N],lp[N],rp[N];
int build(int ss,int se)
{
	int pos=Nodes++;
	if(ss==se)
	{
		seg[pos]=0;
		lp[pos]=-1;
		rp[pos]=-1;
		return pos;
	}
	int mid=(ss+se)/2;
	lp[pos]=build(ss,mid);
	rp[pos]=build(mid+1,se);
	seg[pos]=0;
	// seg[pos]=seg[lp[pos]]+seg[rp[pos]];
	return pos;
}
int update(int root,int ss,int se,int ind,int val){
	if(ind < ss || ind > se)
		return root;
	int pos=Nodes++;
	if(ss == se)
	{
		seg[pos]=val;
		return pos;
	}
	int mid=(ss+se)/2;
	if(ind <=mid)
	{
		lp[pos]=update(lp[root],ss,mid,ind,val);
		rp[pos]=rp[root];
		seg[pos]=seg[lp[pos]]+seg[rp[pos]];
		return pos;
	}
	else
	{
		rp[pos]=update(rp[root],mid+1,se,ind,val);
		lp[pos]=lp[root];
		seg[pos]=seg[lp[pos]]+seg[rp[pos]];
		return pos;
	}
}
int query(int pos,int ss,int se,int l,int r)
{
	if(l <=ss && r>=se)
	{
		return seg[pos];
	}
	if(l > se || r < ss)
		return 0;
	int mid=(ss+se)/2;
	return query(lp[pos],ss,mid,l,r)+query(rp[pos],mid+1,se,l,r);
}
int32_t main()
{
    ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
    int n;cin>>n;
    v arr(n);in(arr,n);
    v next(n,n);
    map<int,int>mapp;
    for(int i=n-1;i>=0;i--)
    {
    	if(mapp.count(arr[i]))
    		next[i]=mapp[arr[i]];
    	mapp[arr[i]]=i;
    }
    v roots;
    int root=build(0,n-1);
    // roots.pb(root);
    for(int i=n-1;i>=0;i--)
    {
    	root=update(root,0,n-1,i,1);
    	if(next[i]!=n)
    	{
    		root=update(root,0,n-1,next[i],0);
    	}
    	roots.pb(root);
    }
    reverse(all(roots));
    int q;cin>>q;
    while(q--)
    {
    	int l,r;cin>>l>>r;
    	cout<<query(roots[l-1],0,n-1,l-1,r-1)<<endl;
    }
    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>persistent-seg-tree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
